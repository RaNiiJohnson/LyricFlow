// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  userType      String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  members     Member[]
  invitations Invitation[]

  // Lyrics app relations
  favoriteSongs UserFavoriteSong[]
  playlists     Playlist[]

  @@unique([email])
  @@map("user")
}

model Organization {
  id          String       @id
  name        String
  slug        String?
  logo        String?
  createdAt   DateTime     @default(now())
  metadata    String?
  members     Member[]
  invitations Invitation[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime     @default(now())

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  check          Boolean      @default(false)
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  activeOrganizationId String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// === LYRICS APPLICATION MODELS ===

model Artist {
  id          String   @id @default(cuid())
  name        String
  bio         String?
  imageUrl    String?
  genres      String[]
  spotifyId   String?
  socialLinks Json? // JSON object with keys like twitter, instagram, facebook
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  songs  Song[]
  albums Album[]
  photos ArtistPhoto[]

  @@unique([spotifyId])
  @@map("artist")
}

model ArtistPhoto {
  id        String   @id @default(cuid())
  url       String
  caption   String?
  width     Int?
  height    Int?
  category  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  artistId String
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@map("artist_photo")
}

model Album {
  id          String    @id @default(cuid())
  title       String
  coverUrl    String?
  genre       String?
  description String?
  releaseDate DateTime?
  spotifyId   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  artistId String
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  songs    Song[]

  @@unique([spotifyId])
  @@map("album")
}

model Song {
  id           String    @id @default(cuid())
  title        String
  duration     Int? // in seconds
  trackNumber  Int?
  thumbnailUrl String?
  youtubeId    String?
  releaseDate  DateTime?
  genre        String?
  isExplicit   Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  artistId String
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  albumId String?
  album   Album?  @relation(fields: [albumId], references: [id], onDelete: SetNull)

  lyrics        Lyric[]
  annotations   Annotation[]
  favorites     UserFavoriteSong[]
  playlistSongs PlaylistSong[]

  @@unique([youtubeId])
  @@map("song")
}

model Lyric {
  id        String   @id @default(cuid())
  content   String   @db.Text
  section   String? // verse, chorus, bridge, outro, etc.
  order     Int
  startTime Int? // in milliseconds for sync
  endTime   Int? // in milliseconds for sync
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  songId String
  song   Song   @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@map("lyric")
}

model Annotation {
  id         String   @id @default(cuid())
  content    String   @db.Text
  startIndex Int // character position in lyrics
  endIndex   Int // character position in lyrics
  verified   Boolean  @default(false)
  upvotes    Int      @default(0)
  downvotes  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  songId String
  song   Song   @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@map("annotation")
}

model Playlist {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean  @default(false)
  coverUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  songs PlaylistSong[]

  @@map("playlist")
}

model PlaylistSong {
  id      String   @id @default(cuid())
  order   Int
  addedAt DateTime @default(now())

  playlistId String
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  songId String
  song   Song   @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([playlistId, songId])
  @@map("playlist_song")
}

model UserFavoriteSong {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  songId String
  song   Song   @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([userId, songId])
  @@map("user_favorite_song")
}
